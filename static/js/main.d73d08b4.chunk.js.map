{"version":3,"sources":["helpers.js","components/card.js","components/end.js","components/game.js","components/input.js","components/header.js","index.js"],"names":["DealtCard","val","hasBeenRevealed","isTurned","this","DealtCards","cards","nRows","nCols","_dealCards","finalTime","nCards","cardValues","i","concat","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","r","push","c","forEach","row","x","nCardsTurned","Number","countTurned","turnedCards","time","Card","dc","col","setDC","color","fontSize","backgroundColorIsTurned","card","value","backgroundColor","style","onClick","dcOld","dcNew","Object","assign","create","getPrototypeOf","reset","markRevealed","End","userName","setTime","Game","gameInitialized","setGameInitialized","useEffect","interval","setInterval","oldTime","clearInterval","temp","map","ix","className","key","checkGameOver","InputForm","setNRows","setNCols","setUserName","setInputFormSubmitted","onSubmit","event","preventDefault","alert","type","name","onChange","e","target","Restart","Timer","ReactDOM","render","useState","inputFormSubmitted","id","document","getElementById"],"mappings":"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","file":"static/js/main.d73d08b4.chunk.js","sourcesContent":["function shuffle(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nclass DealtCard {\n    constructor(val, hasBeenRevealed, isTurned) {\n        this.val = val;\n        this.hasBeenRevealed = hasBeenRevealed;\n        this.isTurned = isTurned;\n    }\n}\n\n\nclass DealtCards {\n    /**\n     * Class representing dealt cards\n     * @param cards {Array|null} 2D array containing Card instances\n     * @param nRows {int} Number of rows\n     * @param nCols {int} Number of columns\n     */\n    constructor(cards, nRows, nCols) {\n        this.nRows = nRows;\n        this.nCols = nCols;\n        if (cards === null) {\n            this.cards = this._dealCards(nRows, nCols)\n\n        } else {\n            this.cards = cards\n        }\n        this.finalTime = null\n    }\n\n    _dealCards(nRows, nCols) {\n        const nCards = nRows * nCols;\n\n        let cardValues = [];\n        for (let i = 0; i < (nCards / 2); i++) {\n            cardValues = cardValues.concat([i, i])\n        }\n\n        cardValues = shuffle(cardValues);\n\n        let cards = [];\n        for (let r = 0; r < nRows; r++) {\n            cards.push([]);\n            for (let c = 0; c < nCols; c++) {\n                cards[cards.length - 1].push(new DealtCard(cardValues[r * nCols + c], false, false))\n            }\n        }\n        return cards\n    }\n\n    /**\n     * Turn all cards so that none is visible.\n     */\n    reset() {\n        this.cards.forEach((row, r) => {\n            row.forEach((x, c) => {\n                x.isTurned = false\n\n            })\n        })\n    }\n\n    countTurned() {\n        let nCardsTurned = 0;\n        this.cards.forEach((row, r) => {\n            row.forEach((x, c) => {\n                nCardsTurned += Number(x.isTurned)\n            })\n        });\n        return nCardsTurned\n    }\n\n    markRevealed() {\n        let nCardsTurned = this.countTurned();\n\n        if (nCardsTurned === 2) {\n            let turnedCards = [];\n            this.cards.forEach((row, r) => {\n                row.forEach((x, c) => {\n                    if (x.isTurned) {\n                        turnedCards.push(x)\n                    }\n                })\n            });\n            if (turnedCards[0].val === turnedCards[1].val) {\n                turnedCards[0].hasBeenRevealed = true;\n                turnedCards[1].hasBeenRevealed = true;\n            }\n        }\n\n    }\n\n    checkGameOver(time) {\n        for (let r = 0; r < this.nRows; r++) {\n            for (let c = 0; c < this.nCols; c++) {\n                if (!this.cards[r][c].hasBeenRevealed) {\n                    return false\n                }\n            }\n        }\n        if (this.finalTime === null){\n            this.finalTime = time\n        }\n        return true\n    }\n\n}\n\n\nexport default DealtCards\n","import React from 'react'\n\n\nconst Card = ({dc, row, col, setDC, color, fontSize, backgroundColorIsTurned}) => {\n    // Helpers\n\n    const onClick = () => {\n        setDC((dcOld) => {\n            // make a deep copy\n            const dcNew = Object.assign(Object.create(Object.getPrototypeOf(dcOld)), dcOld);\n\n            // if 2 cards turned make sure they are not visible\n            if (dcNew.countTurned() === 2){\n                dcNew.reset()\n            }\n\n            // Turn selected card (make sure not turned already)\n            if (!dcNew.cards[row][col].isTurned){\n                dcNew.cards[row][col].isTurned = !dcNew.cards[row][col].isTurned;\n            }\n            dcNew.markRevealed();\n            return dcNew\n        })\n\n    };\n    const card = dc.cards[row][col];\n\n    const hasBeenRevealed = card.hasBeenRevealed;\n    const isTurned = card.isTurned;\n\n    let value = '';  //if not revealed\n    let backgroundColor = 'red';\n\n    if (isTurned) {\n        value = card.val;\n        backgroundColor = backgroundColorIsTurned;\n    }\n\n\n    return (\n        <div> {!hasBeenRevealed && (\n            <button style={{\n                color: `${color}`,\n                fontSize: `${fontSize}px`,\n                backgroundColor: `${backgroundColor}`\n\n            }} onClick={onClick}>{value}</button>)}\n        </div>)\n}\n\nexport default Card","import React from 'react'\n\nconst End = ({userName, finalTime, setTime}) => {\n    setTime(0); // reset timer\n    return (<h1>Congratz {userName}! Finished in {finalTime} seconds</h1>)\n};\n\nexport default End;\n","import React, {useEffect} from 'react'\nimport DealtCards from '../helpers'\nimport Card from './card'\nimport End from \"./end\";\n\nconst Game = ({dc, setDC, nRows, nCols, userName, gameInitialized, setGameInitialized, time, setTime}) => {\n\n    //Set Timer\n    useEffect(() => {\n        const interval = setInterval(() => setTime(oldTime => oldTime + 1), 1000);// componentDidMount\n\n        return () => {\n            clearInterval(interval);\n            setTime(0)\n        }  // componentWillUnmount\n        /* eslint-disable-next-line */\n    }, []);\n\n\n    // EXECUTION\n    if (!gameInitialized || (dc === null)) {\n        // very first game or restarted\n        dc = new DealtCards(null, nRows, nCols);\n        setDC(dc);\n        setGameInitialized(true)\n\n    }\n\n\n    const cardValues = [];\n    for (let r = 0; r < nRows; r++) {\n        for (let c = 0; c < nCols; c++) {\n            cardValues.push([dc, r, c])\n        }\n    }\n\n    let temp = (cardValues.map((x, ix) => <div className=\"gridItem\" key={ix}><Card dc={x[0]} row={x[1]} col={x[2]}\n                                                                                   setDC={setDC} color='black'\n                                                                                   fontSize={20}\n                                                                                   backgroundColorIsTurned='green'/>\n    </div>));\n\n    return (\n        <div>\n            {!dc.checkGameOver(time) ? (\n                <div className=\"gridContainer\" style={{'gridTemplateColumns': `repeat(${nCols},auto`}}>\n                    {temp}\n                </div>) : (<End userName={userName} finalTime={dc.finalTime} setTime={setTime}/>)}\n        </div>)\n\n};\n\n\nexport default Game","import React from 'react'\n\n\nconst InputForm = ({nRows, setNRows, nCols, setNCols, userName, setUserName, setInputFormSubmitted}) => {\n\n    const onChangeRows = (e) => {\n        setNRows(Number(e.target.value))\n    };\n\n    const onChangeCols = (e) => {\n        setNCols(Number(e.target.value))\n    };\n\n    const onChangeUserName = (e) => {\n        setUserName(e.target.value)\n    };\n\n    const checkInputCorrect = () => {\n        return (nCols * nRows % 2 === 0 && userName !== '')\n    };\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        if (checkInputCorrect()) {\n            setInputFormSubmitted(true);\n        } else {\n            alert('Input cards needs to be even and username needs to be specified!')\n        }\n\n    };\n\n    return (\n        <form onSubmit={onSubmit}>\n            <div>\n                <label>Number of rows:</label>\n                <input type=\"text\" name=\"Number of rows\" value={nRows} onChange={onChangeRows}></input>\n            </div>\n            <div>\n                <label>Number of columns:</label>\n                <input type=\"text\" name=\"Number of columns\" value={nCols} onChange={onChangeCols}></input>\n            </div>\n            <div>\n                <label>Username:</label>\n                <input type=\"text\" name=\"Username\" value={userName} onChange={onChangeUserName}></input>\n            </div>\n            <div>\n                <input type=\"submit\" value=\"Start game\"></input>\n            </div>\n\n        </form>)\n};\n\n\nexport default InputForm","import React from 'react'\n\n\nconst Restart = ({setInputFormSubmitted, setGameInitialized}) => {\n    const onClick = () => {\n        setInputFormSubmitted(false);\n        setGameInitialized(false)\n    };\n    return (<button onClick={onClick}>Restart</button>)\n};\n\nexport {Restart}\n\nconst Timer = ({time}) => {\n    return (\n        <div>\n            {(time !== 0) && (<h1>Elapsed seconds: {time}</h1>)}\n        </div>)\n};\n\nexport {Timer}","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from \"./components/game\";\nimport InputForm from \"./components/input\";\nimport {Restart, Timer} from \"./components/header\"\n\n\nconst App = () => {\n\n    const [nRows, setNRows] = useState(1);\n    const [nCols, setNCols] = useState(2);\n    const [userName, setUserName] = useState('CoolUser');\n    const [inputFormSubmitted, setInputFormSubmitted] = useState(false);\n    const [gameInitialized, setGameInitialized] = useState(false);\n    const [dc, setDC] = useState(null);\n    const [time, setTime] = useState(0)\n\n\n    return (\n        <div id=\"wrapper\">\n            <div id=\"header\">\n                <Restart setInputFormSubmitted={setInputFormSubmitted}\n                         setGameInitialized={setGameInitialized}/>\n                 <Timer time={time}/>\n            </div>\n            <div id=\"body\">\n                {!inputFormSubmitted ? (\n                    <InputForm nRows={nRows}\n                               setNRows={setNRows}\n                               nCols={nCols}\n                               setNCols={setNCols}\n                               userName={userName}\n                               setUserName={setUserName}\n                               setInputFormSubmitted={setInputFormSubmitted}/>\n\n                ) : (<Game dc={dc}\n                           setDC={setDC}\n                           nRows={nRows}\n                           nCols={nCols}\n                           userName={userName}\n                           gameInitialized={gameInitialized}\n                           setGameInitialized={setGameInitialized}\n                           time={time}\n                           setTime={setTime}\n                />)\n                }\n\n            </div>\n            <div id=\"footer\">\n            </div>\n        </div>\n    )\n\n}\n\nReactDOM.render(\n    <App/>\n    , document.getElementById('root'));"],"sourceRoot":""}