{"version":3,"sources":["helpers.js","components/card.js","components/firebase.js","components/end.js","components/game.js","components/input.js","components/header.js","index.js"],"names":["DealtCard","val","hasBeenRevealed","isTurned","this","DealtCards","cards","nRows","nCols","_dealCards","finalTime","nCards","cardValues","i","concat","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","r","push","c","forEach","row","x","nCardsTurned","Number","countTurned","turnedCards","time","Card","dc","col","setDC","backgroundColorIsTurned","card","value","backgroundColor","Fragment","className","style","onClick","dcOld","dcNew","Object","assign","create","getPrototypeOf","reset","markRevealed","useStyles","makeStyles","headerCell","table","height","width","margin","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","userName","nEntriesToDisplay","useState","db","setDB","classes","useEffect","firebase","ref","child","String","newEntry","Date","getTime","orderByChild","limitToFirst","once","then","snapshot","newDB","rows","keys","map","key","ix","rank","name","score","timeStamp","d","day","getDay","month","getMonth","year","getFullYear","minutes","getMinutes","hours","getHours","TableContainer","id","Table","TableHead","TableRow","TableCell","align","TableBody","component","scope","End","setTime","Game","gameInitialized","setGameInitialized","interval","setInterval","oldTime","clearInterval","temp","checkGameOver","InputForm","setNRows","setNCols","setUserName","setInputFormSubmitted","onSubmit","event","preventDefault","alert","placeholder","type","onChange","e","target","Restart","Timer","ReactDOM","render","inputFormSubmitted","document","getElementById"],"mappings":"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","file":"static/js/main.d2b28a7b.chunk.js","sourcesContent":["function shuffle(array) {\n    let currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nclass DealtCard {\n    constructor(val, hasBeenRevealed, isTurned) {\n        this.val = val;\n        this.hasBeenRevealed = hasBeenRevealed;\n        this.isTurned = isTurned;\n    }\n}\n\n\nclass DealtCards {\n    /**\n     * Class representing dealt cards\n     * @param cards {Array|null} 2D array containing Card instances\n     * @param nRows {int} Number of rows\n     * @param nCols {int} Number of columns\n     */\n    constructor(cards, nRows, nCols) {\n        this.nRows = nRows;\n        this.nCols = nCols;\n        if (cards === null) {\n            this.cards = this._dealCards(nRows, nCols)\n\n        } else {\n            this.cards = cards\n        }\n        this.finalTime = null\n    }\n\n    _dealCards(nRows, nCols) {\n        const nCards = nRows * nCols;\n\n        let cardValues = [];\n        for (let i = 0; i < (nCards / 2); i++) {\n            cardValues = cardValues.concat([i, i])\n        }\n\n        cardValues = shuffle(cardValues);\n\n        let cards = [];\n        for (let r = 0; r < nRows; r++) {\n            cards.push([]);\n            for (let c = 0; c < nCols; c++) {\n                cards[cards.length - 1].push(new DealtCard(cardValues[r * nCols + c], false, false))\n            }\n        }\n        return cards\n    }\n\n    /**\n     * Turn all cards so that none is visible.\n     */\n    reset() {\n        this.cards.forEach((row, r) => {\n            row.forEach((x, c) => {\n                x.isTurned = false\n\n            })\n        })\n    }\n\n    countTurned() {\n        let nCardsTurned = 0;\n        this.cards.forEach((row, r) => {\n            row.forEach((x, c) => {\n                nCardsTurned += Number(x.isTurned)\n            })\n        });\n        return nCardsTurned\n    }\n\n    markRevealed() {\n        let nCardsTurned = this.countTurned();\n\n        if (nCardsTurned === 2) {\n            let turnedCards = [];\n            this.cards.forEach((row, r) => {\n                row.forEach((x, c) => {\n                    if (x.isTurned) {\n                        turnedCards.push(x)\n                    }\n                })\n            });\n            if (turnedCards[0].val === turnedCards[1].val) {\n                turnedCards[0].hasBeenRevealed = true;\n                turnedCards[1].hasBeenRevealed = true;\n            }\n        }\n\n    }\n\n    checkGameOver(time) {\n        for (let r = 0; r < this.nRows; r++) {\n            for (let c = 0; c < this.nCols; c++) {\n                if (!this.cards[r][c].hasBeenRevealed) {\n                    return false\n                }\n            }\n        }\n        if (this.finalTime === null){\n            this.finalTime = time\n        }\n        return true\n    }\n\n}\n\n\nexport default DealtCards\n","import React from 'react'\n\n\nconst Card = ({dc, row, col, setDC, backgroundColorIsTurned}) => {\n    // Helpers\n\n    const onClick = () => {\n        setDC((dcOld) => {\n            // make a deep copy\n            const dcNew = Object.assign(Object.create(Object.getPrototypeOf(dcOld)), dcOld);\n\n            // if 2 cards turned make sure they are not visible\n            if (dcNew.countTurned() === 2) {\n                dcNew.reset()\n            }\n\n            // Turn selected card (make sure not turned already)\n            if (!dcNew.cards[row][col].isTurned) {\n                dcNew.cards[row][col].isTurned = !dcNew.cards[row][col].isTurned;\n            }\n            dcNew.markRevealed();\n            return dcNew\n        })\n\n    };\n    const card = dc.cards[row][col];\n\n    const hasBeenRevealed = card.hasBeenRevealed;\n    const isTurned = card.isTurned;\n\n    let value = '';  //if not revealed\n    let backgroundColor = '#FF6F42';\n\n    if (isTurned) {\n        value = card.val;\n        backgroundColor = backgroundColorIsTurned;\n    }\n\n    return (\n        <React.Fragment> {!hasBeenRevealed && (\n            <button className=\"cardButton\" style={{\n                backgroundColor: `${backgroundColor}`\n\n            }} onClick={onClick}>{value}</button>)}\n        </React.Fragment>)\n};\n\nexport default Card","import * as firebase from 'firebase';\nimport React, {useEffect, useState} from \"react\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n\nconst useStyles = makeStyles({\n        headerCell: {\n            \"font-weight\": \"bold\",\n        },\n        table: {\n            height: \"90%\",\n            width: \"90%\",\n            margin: \"0 auto\"\n\n        }\n    }\n);\n\n\nlet firebaseConfig = {\n    apiKey: \"AIzaSyDTBOhkfQUnZAIlWlkQa1dbf8338RXIhCI\",\n    authDomain: \"concentration-6830e.firebaseapp.com\",\n    databaseURL: \"https://concentration-6830e.firebaseio.com\",\n    projectId: \"concentration-6830e\",\n    storageBucket: \"concentration-6830e.appspot.com\",\n    messagingSenderId: \"568314381412\",\n    appId: \"1:568314381412:web:ca8c364c9a189cf5f6cb71\",\n    measurementId: \"G-NJLRNG3GVZ\"\n};\n\n// Initialize Firebase\nconst Firebase = ({nCards, userName, finalTime, nEntriesToDisplay}) => {\n\n    const [db, setDB] = useState(null);\n    const classes = useStyles();\n    useEffect(() => {\n        // connect to database\n        if (!firebase.apps.length) {\n            firebase.initializeApp(firebaseConfig);\n        }\n\n        // get reference\n        let ref = firebase.database().ref('highscoresNew').child(String(nCards));\n\n        // Upload highscore\n        let newEntry = {};\n        newEntry['score'] = finalTime;\n        newEntry['userName'] = userName;\n        newEntry['timeStamp'] = (new Date()).getTime();\n        ref.push(newEntry);\n\n        // Get all highscores for a given nCards\n        ref.orderByChild('score').limitToFirst(nEntriesToDisplay).once('value').then(\n            (snapshot) => {\n                let newDB = [];\n                snapshot.forEach(x => {newDB.push(x.val())});\n                setDB(newDB);\n            }\n        )\n    }, [finalTime, nCards, userName, nEntriesToDisplay]);\n\n    let items;\n    if (db !== null) {\n        // console.log(db);\n        items = Object.keys(db).map(function (key, ix) {\n            return [ix + 1, db[key]['userName'], db[key]['score'], db[key]['timeStamp']];\n        });\n\n    } else {\n        return <h1>Fetching leaderboard ...</h1>\n    }\n    const createRow = ([rank, name, score, timeStamp]) => {\n        let d = new Date(timeStamp);\n        let day = d.getDay();\n        let month = d.getMonth() + 1;\n        let year = d.getFullYear();\n        let minutes = (d.getMinutes() < 10 ? '0' : '') + d.getMinutes();\n        let hours = d.getHours();\n        let time = `${day}/${month}/${year} ${hours}:${minutes}`;\n        return {rank, name, score, time, timeStamp}  // probably jsx:D\n    };\n\n    const rows = items.map(createRow);\n\n    return (\n        <TableContainer id=\"table\">\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell className={classes.headerCell} align=\"center\">Ranking</TableCell>\n                        <TableCell className={classes.headerCell} align=\"center\">Username</TableCell>\n                        <TableCell className={classes.headerCell} align=\"center\">Score</TableCell>\n                        <TableCell className={classes.headerCell} align=\"center\">Time</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows.map(row => (\n                        <TableRow key={row.timeStamp}>\n                            <TableCell component=\"th\" scope=\"row\" align=\"center\">{row.rank}</TableCell>\n                            <TableCell align=\"center\">{row.name}</TableCell>\n                            <TableCell align=\"center\">{row.score}</TableCell>\n                            <TableCell align=\"center\">{row.time}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n\n\n            </Table>\n        </TableContainer>)\n    //\n    // return (<div>{temp}</div>)\n\n};\n\n\nexport default Firebase","import React from 'react'\nimport Firebase from \"./firebase\";\n\nconst End = ({userName, finalTime, setTime, nCards}) => {\n    setTime(0); // reset timer\n    return (\n        <React.Fragment>\n            <h1>{`Congratz ${userName}! Finished in ${finalTime} seconds`}</h1>\n            <Firebase nCards={nCards} userName={userName} finalTime={finalTime} nEntriesToDisplay={20}/>\n        </React.Fragment>)\n};\n\nexport default End;\n","import React, {useEffect} from 'react'\nimport DealtCards from '../helpers'\nimport Card from './card'\nimport End from \"./end\";\n\n\nconst Game = ({dc, setDC, nRows, nCols, userName, gameInitialized, setGameInitialized, time, setTime}) => {\n\n    let nCards = nRows * nCols;\n    //Set Timer\n    useEffect(() => {\n        const interval = setInterval(() => setTime(oldTime => oldTime + 1), 1000);// componentDidMount\n\n        return () => {\n            clearInterval(interval);\n            setTime(0)\n        }  // componentWillUnmount\n        /* eslint-disable-next-line */\n    }, []);\n\n\n    // EXECUTION\n    if (!gameInitialized || (dc === null)) {\n        // very first game or restarted\n        dc = new DealtCards(null, nRows, nCols);\n        setDC(dc);\n        setGameInitialized(true)\n\n    }\n\n\n    const cardValues = [];\n    for (let r = 0; r < nRows; r++) {\n        for (let c = 0; c < nCols; c++) {\n            cardValues.push([dc, r, c])\n        }\n    }\n\n    let temp = (cardValues.map((x, ix) =>\n        <div className=\"gridItem\"\n             key={ix}><Card dc={x[0]}\n                            row={x[1]}\n                            col={x[2]}\n                            setDC={setDC}\n                            backgroundColorIsTurned='#7FE83C'/>\n        </div>));\n\n    return (\n        <React.Fragment>\n            {!dc.checkGameOver(time) ? (\n                <div id=\"gridContainer\"\n                     style={\n                         {\n                             'gridTemplateColumns': `repeat(${nCols},1fr`,\n                             'gridTemplateRows': `repeat(${nRows},1fr`\n\n                         }\n                     }>\n                    {temp}\n                </div>) : (<End userName={userName} finalTime={dc.finalTime} setTime={setTime} nCards={nCards}/>)}\n        </React.Fragment>)\n\n};\n\n\nexport default Game","import React from 'react'\n\n\nconst InputForm = ({nRows, setNRows, nCols, setNCols, userName, setUserName, setInputFormSubmitted}) => {\n\n    const onChangeRows = (e) => {\n        setNRows(Number(e.target.value))\n    };\n\n    const onChangeCols = (e) => {\n        setNCols(Number(e.target.value))\n    };\n\n    const onChangeUserName = (e) => {\n        setUserName(e.target.value)\n    };\n\n    const checkInputCorrect = () => {\n        return (nCols * nRows % 2 === 0 && userName !== '')\n    };\n\n    const onSubmit = (event) => {\n        event.preventDefault();\n        if (checkInputCorrect()) {\n            setInputFormSubmitted(true);\n        } else {\n            alert('Input cards need to be even and username needs to be specified!')\n        }\n\n    };\n\n    return (\n        <form id=\"inputForm\" onSubmit={onSubmit}>\n            <div>\n                <input className=\"inputField\"\n                       placeholder=\"# rows\"\n                       type=\"text\"\n                       value={nRows || \"\"}\n                       onChange={onChangeRows}\n                />\n            </div>\n            <div>\n                <input className=\"inputField\"\n                       placeholder=\"# columns\"\n                       type=\"text\"\n                       value={nCols || \"\"}\n                       onChange={onChangeCols}/>\n            </div>\n            <div>\n                <input className=\"inputField\"\n                       placeholder=\"Username\"\n                       type=\"text\"\n                       value={userName}\n                       onChange={onChangeUserName}/>\n            </div>\n            <div>\n                <input id=\"submitButton\" type=\"submit\" value=\"Start game\"/>\n            </div>\n\n        </form>)\n};\n\n\nexport default InputForm","import React from 'react'\n\n\nconst Restart = ({setInputFormSubmitted, setGameInitialized, setNRows, setNCols, setUserName}) => {\n    const onClick = () => {\n        setInputFormSubmitted(false);\n        setGameInitialized(false)\n        setNRows(0);\n        setNCols(0);\n        setUserName(\"\");\n    };\n    return (<button id=\"restartButton\" onClick={onClick}>Restart</button>)\n};\n\nexport {Restart}\n\nconst Timer = ({time}) => {\n    return (\n        <div id=\"timer\">\n            {(time !== 0) && (<h1 id=\"timerText\">Elapsed seconds: {time}</h1>)}\n        </div>)\n};\n\nexport {Timer}","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from \"./components/game\";\nimport InputForm from \"./components/input\";\nimport {Restart, Timer} from \"./components/header\"\n\n\nconst App = () => {\n\n    const [nRows, setNRows] = useState(0);  // like this the placeholder will show\n    const [nCols, setNCols] = useState(0);  // like this the placeholder will show\n    const [userName, setUserName] = useState('');  // like this the placeholder will show\n    const [inputFormSubmitted, setInputFormSubmitted] = useState(false);\n    const [gameInitialized, setGameInitialized] = useState(false);\n    const [dc, setDC] = useState(null);\n    const [time, setTime] = useState(0);\n\n    return (\n        <div id=\"wrapper\">\n            <div id=\"header\">\n                <Restart setInputFormSubmitted={setInputFormSubmitted}\n                         setGameInitialized={setGameInitialized}\n                         setNRows={setNRows}\n                         setNCols={setNCols}\n                         setUserName={setUserName}\n                />\n                <Timer time={time}/>\n            </div>\n            <div id=\"body\">\n                {!inputFormSubmitted ? (\n                    <InputForm nRows={nRows}\n                               setNRows={setNRows}\n                               nCols={nCols}\n                               setNCols={setNCols}\n                               userName={userName}\n                               setUserName={setUserName}\n                               setInputFormSubmitted={setInputFormSubmitted}/>\n\n                ) : (<Game dc={dc}\n                           setDC={setDC}\n                           nRows={nRows}\n                           nCols={nCols}\n                           userName={userName}\n                           gameInitialized={gameInitialized}\n                           setGameInitialized={setGameInitialized}\n                           time={time}\n                           setTime={setTime}\n                />)\n                }\n\n            </div>\n            <div id=\"footer\">\n            </div>\n        </div>\n    )\n\n}\n\nReactDOM.render(\n    <App/>\n    , document.getElementById('root'));"],"sourceRoot":""}